"use strict";

var socketio = require("socket.io");

function HotModuleReplacement(){
  this.io = null;
  this.stats = null;
}

HotModuleReplacement.prototype = {
  constructor: HotModuleReplacement,
  listen: function(server, webpackCompiler){
    this.io = socketio.listen(server, { "log level": 1 });
    this.io.sockets.on("connection", function(socket) {
      socket.emit("hot");
      if(!this.stats){
        return;
      }
      this.sendStats(socket, this.stats.toJson(), true);
    }.bind(this));

    webpackCompiler.plugin("compile", this.invalidPlugin);
    webpackCompiler.plugin("invalid", this.invalidPlugin);
    webpackCompiler.plugin('done', function(stats){
      if(!this.io){
        return;
      }
      this.sendStats(this.io.sockets, stats.toJson());
      this.stats = stats;
    }.bind(this));
  },
  close: function(){
    if (this.io){
      this.io.close();
      this.io = null;
    }
  },
  invalidPlugin: function () {
    if (this.io) {
      this.io.emit("invalid");
    }
  },
  // send stats to a socket or multiple sockets
  sendStats: function(socket, stats, force) {
    var emitted = function(asset) {
      return !asset.emitted;
    };
    if(!force && stats && stats.assets && stats.assets.every(emitted)) {
      return socket.emit("still-ok");
    }
    socket.emit("hash", stats.hash);
    if(stats.errors.length > 0){
      socket.emit("errors", stats.errors);
    }
    else if(stats.warnings.length > 0){
      socket.emit("warnings", stats.warnings);
    }
    else {
      socket.emit("ok");
    }
  }
};

module.exports = new HotModuleReplacement();
